/* jshint ignore:start */

/* jshint ignore:end */

define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {

  'use strict';

  var App;

  Ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = Ember['default'].Application.extend({
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix,
    Resolver: Resolver['default']
  });

  loadInitializers['default'](App, config['default'].modulePrefix);

  exports['default'] = App;

});
define('dummy/components/test-component', ['exports', 'ember', 'dummy/templates/components/test-component', 'ember-cli-keyboard-actions/mixins/keyboard-actions'], function (exports, Ember, layout, KAM) {

  'use strict';

  /*eslint new-cap:0*/
  exports['default'] = Ember['default'].Component.extend(KAM['default'], {
    layout: layout['default'],
    keyDownAny: Ember['default'].A([]),
    keyDownRange: Ember['default'].A([]),
    keyDownPretty: Ember['default'].A([]),
    keyDownSingle: Ember['default'].A([]),

    updateKeyList: function updateKeyList(keyPressed) {
      this.keyDownAny.pushObject(keyPressed);
    },

    keyChordActions: {
      ctrl: {
        a: function a() {
          console.log("Ctrl + A pressed");
        }
      },
      alt: {
        a: function a() {
          console.log("Alt + A pressed");
        }
      },
      shift: {
        a: function a() {
          console.log("Shift + A pressed");
        }
      },
      "ctrl.alt": {
        a: function a() {
          console.log("Ctrl, Alt + A pressed");
        }
      },
      "ctrl.alt.shift": {
        a: function a() {
          console.log("Ctrl, Shift, Alt + A pressed");
        }
      }
    },

    keyDownActions: {
      any: "updateKeyList",
      alpha: function alpha(code) {
        this.keyDownRange.pushObject("keyDown:" + code);
      },
      space: function space(code) {
        this.keyDownPretty.pushObject("keyDown:" + code);
      },
      key39: function key39(code) {
        this.keyDownSingle.pushObject("keyDown:" + code);
      }
    },
    keyUpActions: {
      any: "updateKeyList",
      alpha: function alpha(code) {
        this.keyDownRange.pushObject("keyUp:" + code);
      },
      space: function space(code) {
        this.keyDownPretty.pushObject("keyUp:" + code);
      },
      key39: function key39(code) {
        this.keyDownSingle.pushObject("keyUp:" + code);
      }
    },
    keyPressActions: {
      any: "updateKeyList",
      alpha: function alpha(code) {
        this.keyDownRange.pushObject("keyPress::" + code);
      },
      space: function space(code) {
        this.keyDownPretty.pushObject("keyPress::" + code);
      },
      key39: function key39(code) {
        this.keyDownSingle.pushObject("keyPress::" + code);
      }
    }
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/function-resolver.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe("ESLint - modules/ember-cli-keyboard-actions", function () {
    mocha.it("modules/ember-cli-keyboard-actions/function-resolver.js should pass ESLint", function () {
      chai.assert.ok(true, "modules/ember-cli-keyboard-actions/function-resolver.js should pass ESLint.\n");
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/function-resolver.jshint', function () {

  'use strict';

  describe("JSHint - modules/ember-cli-keyboard-actions/function-resolver.js", function () {
    it("should pass jshint", function () {
      expect(true, "modules/ember-cli-keyboard-actions/function-resolver.js should pass jshint.").to.be.ok;
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-map.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe("ESLint - modules/ember-cli-keyboard-actions", function () {
    mocha.it("modules/ember-cli-keyboard-actions/keycode-map.js should pass ESLint", function () {
      chai.assert.ok(true, "modules/ember-cli-keyboard-actions/keycode-map.js should pass ESLint.\n");
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-map.jshint', function () {

  'use strict';

  describe("JSHint - modules/ember-cli-keyboard-actions/keycode-map.js", function () {
    it("should pass jshint", function () {
      expect(true, "modules/ember-cli-keyboard-actions/keycode-map.js should pass jshint.").to.be.ok;
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-ranges.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe("ESLint - modules/ember-cli-keyboard-actions", function () {
    mocha.it("modules/ember-cli-keyboard-actions/keycode-ranges.js should pass ESLint", function () {
      chai.assert.ok(true, "modules/ember-cli-keyboard-actions/keycode-ranges.js should pass ESLint.\n");
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-ranges.jshint', function () {

  'use strict';

  describe("JSHint - modules/ember-cli-keyboard-actions/keycode-ranges.js", function () {
    it("should pass jshint", function () {
      expect(true, "modules/ember-cli-keyboard-actions/keycode-ranges.js should pass jshint.").to.be.ok;
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/mixins/keyboard-actions.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe("ESLint - modules/ember-cli-keyboard-actions/mixins", function () {
    mocha.it("modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js should pass ESLint", function () {
      chai.assert.ok(false, "modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js should pass ESLint.\n137:4  - All \"var\" declarations must be at the top of the function scope. (vars-on-top)\n143:4  - All \"var\" declarations must be at the top of the function scope. (vars-on-top)");
    });
  });

});
define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/mixins/keyboard-actions.jshint', function () {

  'use strict';

  describe("JSHint - modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js", function () {
    it("should pass jshint", function () {
      expect(true, "modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js should pass jshint.").to.be.ok;
    });
  });

});
define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {

  'use strict';

  var classify = Ember['default'].String.classify;
  var registered = false;

  exports['default'] = {
    name: "App Version",
    initialize: function initialize(container, application) {
      if (!registered) {
        var appName = classify(application.toString());
        Ember['default'].libraries.register(appName, config['default'].APP.version);
        registered = true;
      }
    }
  };

});
define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  exports.initialize = initialize;

  function initialize(container, application) {
    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);

    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {
      window[classifiedName] = application;
    }
  }

  ;

  exports['default'] = {
    name: "export-application-global",

    initialize: initialize
  };

});
define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {

  'use strict';

  var Router = Ember['default'].Router.extend({
    location: config['default'].locationType
  });

  exports['default'] = Router.map(function () {});

});
define('dummy/templates/application', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    return {
      isHTMLBars: true,
      revision: "Ember@1.12.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h2");
        dom.setAttribute(el1,"id","title");
        var el2 = dom.createTextNode("Test Project");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);
        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);
        content(env, morph0, context, "test-component");
        content(env, morph1, context, "outlet");
        return fragment;
      }
    };
  }()));

});
define('dummy/templates/components/test-component', ['exports'], function (exports) {

  'use strict';

  exports['default'] = Ember.HTMLBars.template((function() {
    var child0 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.12.0",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Pressed");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "key");
          return fragment;
        }
      };
    }());
    var child1 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.12.0",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Pressed");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "key");
          return fragment;
        }
      };
    }());
    var child2 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.12.0",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Pressed");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "key");
          return fragment;
        }
      };
    }());
    var child3 = (function() {
      return {
        isHTMLBars: true,
        revision: "Ember@1.12.0",
        blockParams: 0,
        cachedFragment: null,
        hasRendered: false,
        build: function build(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode(" Pressed");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        render: function render(context, env, contextualElement) {
          var dom = env.dom;
          var hooks = env.hooks, content = hooks.content;
          dom.detectNamespace(contextualElement);
          var fragment;
          if (env.useFragmentCache && dom.canClone) {
            if (this.cachedFragment === null) {
              fragment = this.build(dom);
              if (this.hasRendered) {
                this.cachedFragment = fragment;
              } else {
                this.hasRendered = true;
              }
            }
            if (this.cachedFragment) {
              fragment = dom.cloneNode(this.cachedFragment, true);
            }
          } else {
            fragment = this.build(dom);
          }
          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);
          content(env, morph0, context, "key");
          return fragment;
        }
      };
    }());
    return {
      isHTMLBars: true,
      revision: "Ember@1.12.0",
      blockParams: 0,
      cachedFragment: null,
      hasRendered: false,
      build: function build(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("input");
        dom.setAttribute(el1,"type","text");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Any Action");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Range Action");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Pretty Action");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h1");
        var el3 = dom.createTextNode("Single Action");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("ul");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      render: function render(context, env, contextualElement) {
        var dom = env.dom;
        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;
        dom.detectNamespace(contextualElement);
        var fragment;
        if (env.useFragmentCache && dom.canClone) {
          if (this.cachedFragment === null) {
            fragment = this.build(dom);
            if (this.hasRendered) {
              this.cachedFragment = fragment;
            } else {
              this.hasRendered = true;
            }
          }
          if (this.cachedFragment) {
            fragment = dom.cloneNode(this.cachedFragment, true);
          }
        } else {
          fragment = this.build(dom);
        }
        var element0 = dom.childAt(fragment, [4]);
        var element1 = dom.childAt(fragment, [6]);
        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);
        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);
        var morph2 = dom.createMorphAt(dom.childAt(element0, [7]),1,1);
        var morph3 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);
        var morph4 = dom.createMorphAt(dom.childAt(element1, [7]),1,1);
        dom.insertBoundary(fragment, 0);
        content(env, morph0, context, "yield");
        block(env, morph1, context, "each", [get(env, context, "keyDownAny")], {"keyword": "key"}, child0, null);
        block(env, morph2, context, "each", [get(env, context, "keyDownRange")], {"keyword": "key"}, child1, null);
        block(env, morph3, context, "each", [get(env, context, "keyDownPretty")], {"keyword": "key"}, child2, null);
        block(env, morph4, context, "each", [get(env, context, "keyDownSingle")], {"keyword": "key"}, child3, null);
        return fragment;
      }
    };
  }()));

});
define('dummy/tests/app.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - .', function() {
    mocha.it('app.js should pass ESLint', function() {
      chai.assert.ok(true, 'app.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/app.jshint', function () {

  'use strict';

  describe('JSHint - app.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'app.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/components/test-component.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - components', function() {
    mocha.it('components/test-component.js should pass ESLint', function() {
      chai.assert.ok(false, 'components/test-component.js should pass ESLint.\n20:8  - Unexpected console statement. (no-console)\n25:8  - Unexpected console statement. (no-console)\n30:8  - Unexpected console statement. (no-console)\n35:8  - Unexpected console statement. (no-console)\n40:8  - Unexpected console statement. (no-console)');
    });
  });

});
define('dummy/tests/components/test-component.jshint', function () {

  'use strict';

  describe('JSHint - components/test-component.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'components/test-component.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/helpers/resolver.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - helpers', function() {
    mocha.it('helpers/resolver.js should pass ESLint', function() {
      chai.assert.ok(true, 'helpers/resolver.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {

  'use strict';

  var resolver = Resolver['default'].create();

  resolver.namespace = {
    modulePrefix: config['default'].modulePrefix,
    podModulePrefix: config['default'].podModulePrefix
  };

  exports['default'] = resolver;

});
define('dummy/tests/helpers/resolver.jshint', function () {

  'use strict';

  describe('JSHint - helpers/resolver.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'helpers/resolver.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/helpers/start-app.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - helpers', function() {
    mocha.it('helpers/start-app.js should pass ESLint', function() {
      chai.assert.ok(true, 'helpers/start-app.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, Ember, Application, config) {

  'use strict';



  exports['default'] = startApp;
  function startApp(attrs) {
    var application;

    var attributes = Ember['default'].merge({}, config['default'].APP);
    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;

    Ember['default'].run(function () {
      application = Application['default'].create(attributes);
      application.setupForTesting();
      application.injectTestHelpers();
    });

    return application;
  }

});
define('dummy/tests/helpers/start-app.jshint', function () {

  'use strict';

  describe('JSHint - helpers/start-app.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'helpers/start-app.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/router.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - .', function() {
    mocha.it('router.js should pass ESLint', function() {
      chai.assert.ok(true, 'router.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/router.jshint', function () {

  'use strict';

  describe('JSHint - router.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'router.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/test-helper.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - .', function() {
    mocha.it('test-helper.js should pass ESLint', function() {
      chai.assert.ok(true, 'test-helper.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-mocha'], function (resolver, ember_mocha) {

	'use strict';

	ember_mocha.setResolver(resolver['default']);

});
define('dummy/tests/test-helper.jshint', function () {

  'use strict';

  describe('JSHint - test-helper.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'test-helper.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/unit/helpers/function-resolver-test.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - unit/helpers', function() {
    mocha.it('unit/helpers/function-resolver-test.js should pass ESLint', function() {
      chai.assert.ok(true, 'unit/helpers/function-resolver-test.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/unit/helpers/function-resolver-test', ['ember', 'mocha', 'chai', 'ember-cli-keyboard-actions/function-resolver'], function (Ember, mocha, assert, FunctionResolver) {

  'use strict';

  /*eslint no-new:0*/
  var testActions = {
    keyDownActions: {
      key37: function key37() {
        return "key37";
      },
      backspace: function backspace() {
        return "backspace";
      },
      alphanumeric: function alphanumeric() {
        return "alphanumeric";
      },
      any: function any() {
        return "any";
      }
    },
    keyUpActions: {
      key37: function key37() {
        return "key37";
      },
      backspace: function backspace() {
        return "backspace";
      }
    },
    keyPressActions: {
      key37: function key37() {
        return "key37";
      },
      backspace: function backspace() {
        return "backspace";
      }
    }
  };

  mocha.describe("FunctionResolver", function () {
    mocha.it("should be able to resolve a key action based on keyX", function () {
      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);
      var keyUp = new FunctionResolver['default'](testActions.keyUpActions);
      var keyPress = new FunctionResolver['default'](testActions.keyPressActions);

      Ember['default'].run.next(function () {
        assert['default'].equal(keyDown.resolveKeyCode(37)(), "key37");
        assert['default'].equal(keyUp.resolveKeyCode(37)(), "key37");
        assert['default'].equal(keyPress.resolveKeyCode(37)(), "key37");
      });
    });

    mocha.it("should be able to resolve a key action to a key name", function () {
      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);
      var keyUp = new FunctionResolver['default'](testActions.keyUpActions);
      var keyPress = new FunctionResolver['default'](testActions.keyPressActions);

      Ember['default'].run.next(function () {
        assert['default'].equal(keyDown.resolvePrettyName(8)(), "backspace");
        assert['default'].equal(keyUp.resolvePrettyName(8)(), "backspace");
        assert['default'].equal(keyPress.resolvePrettyName(8)(), "backspace");
      });
    });

    mocha.it("should be able to resolve a key action from a key range", function () {
      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);

      Ember['default'].run.next(function () {
        assert['default'].equal(keyDown.resolveKeyRange(85)(), "alphanumeric");
      });
    });

    mocha.it("should be able to resolve a catch all", function () {
      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);

      Ember['default'].run.next(function () {
        assert['default'].equal(keyDown.resolveCatchAll()(), "any");
      });
    });
  });

});
define('dummy/tests/unit/helpers/function-resolver-test.jshint', function () {

  'use strict';

  describe('JSHint - unit/helpers/function-resolver-test.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'unit/helpers/function-resolver-test.js should pass jshint.').to.be.ok; 
  })});

});
define('dummy/tests/unit/mixins/keyboard-actions-test.eslint-test', ['mocha', 'chai'], function (mocha, chai) {

  'use strict';

  mocha.describe('ESLint - unit/mixins', function() {
    mocha.it('unit/mixins/keyboard-actions-test.js should pass ESLint', function() {
      chai.assert.ok(true, 'unit/mixins/keyboard-actions-test.js should pass ESLint.\n');
    });
  });

});
define('dummy/tests/unit/mixins/keyboard-actions-test', ['chai', 'mocha', 'ember', 'ember-cli-keyboard-actions/mixins/keyboard-actions'], function (chai, mocha, Ember, KeyboardActionsMixin) {

  'use strict';

  /* jshint expr:true */
  mocha.describe("KeyboardActionsMixin", function () {
    mocha.it("should exist", function () {
      chai.assert.ok(KeyboardActionsMixin['default']);
    });

    mocha.it("should attach in to the object's event manager", function () {
      var Test = Ember['default'].View.extend(KeyboardActionsMixin['default'], {});
      var sample = Test.create({});

      chai.assert.ok(sample.eventManager.keyUp);
      chai.assert.ok(sample.eventManager.keyPress);
      chai.assert.ok(sample.eventManager.keyDown);
      chai.assert.isFunction(sample.eventManager.keyUp);
      chai.assert.isFunction(sample.eventManager.keyPress);
      chai.assert.isFunction(sample.eventManager.keyDown);
    });
  });

});
define('dummy/tests/unit/mixins/keyboard-actions-test.jshint', function () {

  'use strict';

  describe('JSHint - unit/mixins/keyboard-actions-test.js', function(){
  it('should pass jshint', function() { 
    expect(true, 'unit/mixins/keyboard-actions-test.js should pass jshint.').to.be.ok; 
  })});

});
/* jshint ignore:start */

/* jshint ignore:end */

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

if (runningTests) {
  require("dummy/tests/test-helper");
} else {
  require("dummy/app")["default"].create({"name":"ember-cli-keyboard-actions","version":"v0.3.1"});
}

/* jshint ignore:end */
//# sourceMappingURL=dummy.map