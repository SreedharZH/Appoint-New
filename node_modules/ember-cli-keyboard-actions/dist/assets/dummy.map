{"version":3,"sources":["vendor/ember-cli/app-prefix.js","dummy/app.js","dummy/components/test-component.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/function-resolver.eslint-test.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/function-resolver.jshint.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-map.eslint-test.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-map.jshint.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-ranges.eslint-test.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-ranges.jshint.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/mixins/keyboard-actions.eslint-test.js","dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/mixins/keyboard-actions.jshint.js","dummy/initializers/app-version.js","dummy/initializers/export-application-global.js","dummy/router.js","dummy/templates/application.js","dummy/templates/components/test-component.js","dummy/tests/app.eslint-test.js","dummy/tests/app.jshint.js","dummy/tests/components/test-component.eslint-test.js","dummy/tests/components/test-component.jshint.js","dummy/tests/helpers/resolver.eslint-test.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/resolver.jshint.js","dummy/tests/helpers/start-app.eslint-test.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/start-app.jshint.js","dummy/tests/router.eslint-test.js","dummy/tests/router.jshint.js","dummy/tests/test-helper.eslint-test.js","dummy/tests/test-helper.js","dummy/tests/test-helper.jshint.js","dummy/tests/unit/helpers/function-resolver-test.eslint-test.js","dummy/tests/unit/helpers/function-resolver-test.js","dummy/tests/unit/helpers/function-resolver-test.jshint.js","dummy/tests/unit/mixins/keyboard-actions-test.eslint-test.js","dummy/tests/unit/mixins/keyboard-actions-test.js","dummy/tests/unit/mixins/keyboard-actions-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('dummy/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'dummy/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  var App;\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('dummy/components/test-component', ['exports', 'ember', 'dummy/templates/components/test-component', 'ember-cli-keyboard-actions/mixins/keyboard-actions'], function (exports, Ember, layout, KAM) {\n\n  'use strict';\n\n  /*eslint new-cap:0*/\n  exports['default'] = Ember['default'].Component.extend(KAM['default'], {\n    layout: layout['default'],\n    keyDownAny: Ember['default'].A([]),\n    keyDownRange: Ember['default'].A([]),\n    keyDownPretty: Ember['default'].A([]),\n    keyDownSingle: Ember['default'].A([]),\n\n    updateKeyList: function updateKeyList(keyPressed) {\n      this.keyDownAny.pushObject(keyPressed);\n    },\n\n    keyChordActions: {\n      ctrl: {\n        a: function a() {\n          console.log(\"Ctrl + A pressed\");\n        }\n      },\n      alt: {\n        a: function a() {\n          console.log(\"Alt + A pressed\");\n        }\n      },\n      shift: {\n        a: function a() {\n          console.log(\"Shift + A pressed\");\n        }\n      },\n      \"ctrl.alt\": {\n        a: function a() {\n          console.log(\"Ctrl, Alt + A pressed\");\n        }\n      },\n      \"ctrl.alt.shift\": {\n        a: function a() {\n          console.log(\"Ctrl, Shift, Alt + A pressed\");\n        }\n      }\n    },\n\n    keyDownActions: {\n      any: \"updateKeyList\",\n      alpha: function alpha(code) {\n        this.keyDownRange.pushObject(\"keyDown:\" + code);\n      },\n      space: function space(code) {\n        this.keyDownPretty.pushObject(\"keyDown:\" + code);\n      },\n      key39: function key39(code) {\n        this.keyDownSingle.pushObject(\"keyDown:\" + code);\n      }\n    },\n    keyUpActions: {\n      any: \"updateKeyList\",\n      alpha: function alpha(code) {\n        this.keyDownRange.pushObject(\"keyUp:\" + code);\n      },\n      space: function space(code) {\n        this.keyDownPretty.pushObject(\"keyUp:\" + code);\n      },\n      key39: function key39(code) {\n        this.keyDownSingle.pushObject(\"keyUp:\" + code);\n      }\n    },\n    keyPressActions: {\n      any: \"updateKeyList\",\n      alpha: function alpha(code) {\n        this.keyDownRange.pushObject(\"keyPress::\" + code);\n      },\n      space: function space(code) {\n        this.keyDownPretty.pushObject(\"keyPress::\" + code);\n      },\n      key39: function key39(code) {\n        this.keyDownSingle.pushObject(\"keyPress::\" + code);\n      }\n    }\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/function-resolver.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe(\"ESLint - modules/ember-cli-keyboard-actions\", function () {\n    mocha.it(\"modules/ember-cli-keyboard-actions/function-resolver.js should pass ESLint\", function () {\n      chai.assert.ok(true, \"modules/ember-cli-keyboard-actions/function-resolver.js should pass ESLint.\\n\");\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/function-resolver.jshint', function () {\n\n  'use strict';\n\n  describe(\"JSHint - modules/ember-cli-keyboard-actions/function-resolver.js\", function () {\n    it(\"should pass jshint\", function () {\n      expect(true, \"modules/ember-cli-keyboard-actions/function-resolver.js should pass jshint.\").to.be.ok;\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-map.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe(\"ESLint - modules/ember-cli-keyboard-actions\", function () {\n    mocha.it(\"modules/ember-cli-keyboard-actions/keycode-map.js should pass ESLint\", function () {\n      chai.assert.ok(true, \"modules/ember-cli-keyboard-actions/keycode-map.js should pass ESLint.\\n\");\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-map.jshint', function () {\n\n  'use strict';\n\n  describe(\"JSHint - modules/ember-cli-keyboard-actions/keycode-map.js\", function () {\n    it(\"should pass jshint\", function () {\n      expect(true, \"modules/ember-cli-keyboard-actions/keycode-map.js should pass jshint.\").to.be.ok;\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-ranges.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe(\"ESLint - modules/ember-cli-keyboard-actions\", function () {\n    mocha.it(\"modules/ember-cli-keyboard-actions/keycode-ranges.js should pass ESLint\", function () {\n      chai.assert.ok(true, \"modules/ember-cli-keyboard-actions/keycode-ranges.js should pass ESLint.\\n\");\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/keycode-ranges.jshint', function () {\n\n  'use strict';\n\n  describe(\"JSHint - modules/ember-cli-keyboard-actions/keycode-ranges.js\", function () {\n    it(\"should pass jshint\", function () {\n      expect(true, \"modules/ember-cli-keyboard-actions/keycode-ranges.js should pass jshint.\").to.be.ok;\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/mixins/keyboard-actions.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe(\"ESLint - modules/ember-cli-keyboard-actions/mixins\", function () {\n    mocha.it(\"modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js should pass ESLint\", function () {\n      chai.assert.ok(false, \"modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js should pass ESLint.\\n137:4  - All \\\"var\\\" declarations must be at the top of the function scope. (vars-on-top)\\n143:4  - All \\\"var\\\" declarations must be at the top of the function scope. (vars-on-top)\");\n    });\n  });\n\n});","define('dummy/ember-cli-keyboard-actions/tests/modules/ember-cli-keyboard-actions/mixins/keyboard-actions.jshint', function () {\n\n  'use strict';\n\n  describe(\"JSHint - modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js\", function () {\n    it(\"should pass jshint\", function () {\n      expect(true, \"modules/ember-cli-keyboard-actions/mixins/keyboard-actions.js should pass jshint.\").to.be.ok;\n    });\n  });\n\n});","define('dummy/initializers/app-version', ['exports', 'dummy/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n  var registered = false;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      if (!registered) {\n        var appName = classify(application.toString());\n        Ember['default'].libraries.register(appName, config['default'].APP.version);\n        registered = true;\n      }\n    }\n  };\n\n});","define('dummy/initializers/export-application-global', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('dummy/router', ['exports', 'ember', 'dummy/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  exports['default'] = Router.map(function () {});\n\n});","define('dummy/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"h2\");\n        dom.setAttribute(el1,\"id\",\"title\");\n        var el2 = dom.createTextNode(\"Test Project\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var morph0 = dom.createMorphAt(fragment,2,2,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,4,4,contextualElement);\n        content(env, morph0, context, \"test-component\");\n        content(env, morph1, context, \"outlet\");\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/templates/components/test-component', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" Pressed\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n          content(env, morph0, context, \"key\");\n          return fragment;\n        }\n      };\n    }());\n    var child1 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" Pressed\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n          content(env, morph0, context, \"key\");\n          return fragment;\n        }\n      };\n    }());\n    var child2 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" Pressed\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n          content(env, morph0, context, \"key\");\n          return fragment;\n        }\n      };\n    }());\n    var child3 = (function() {\n      return {\n        isHTMLBars: true,\n        revision: \"Ember@1.12.0\",\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"      \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createComment(\"\");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\" Pressed\");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, content = hooks.content;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(dom.childAt(fragment, [1]),0,0);\n          content(env, morph0, context, \"key\");\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      revision: \"Ember@1.12.0\",\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createComment(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"input\");\n        dom.setAttribute(el1,\"type\",\"text\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Any Action\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Range Action\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Pretty Action\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"Single Action\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"ul\");\n        var el3 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createComment(\"\");\n        dom.appendChild(el2, el3);\n        var el3 = dom.createTextNode(\"  \");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [4]);\n        var element1 = dom.childAt(fragment, [6]);\n        var morph0 = dom.createMorphAt(fragment,0,0,contextualElement);\n        var morph1 = dom.createMorphAt(dom.childAt(element0, [3]),1,1);\n        var morph2 = dom.createMorphAt(dom.childAt(element0, [7]),1,1);\n        var morph3 = dom.createMorphAt(dom.childAt(element1, [3]),1,1);\n        var morph4 = dom.createMorphAt(dom.childAt(element1, [7]),1,1);\n        dom.insertBoundary(fragment, 0);\n        content(env, morph0, context, \"yield\");\n        block(env, morph1, context, \"each\", [get(env, context, \"keyDownAny\")], {\"keyword\": \"key\"}, child0, null);\n        block(env, morph2, context, \"each\", [get(env, context, \"keyDownRange\")], {\"keyword\": \"key\"}, child1, null);\n        block(env, morph3, context, \"each\", [get(env, context, \"keyDownPretty\")], {\"keyword\": \"key\"}, child2, null);\n        block(env, morph4, context, \"each\", [get(env, context, \"keyDownSingle\")], {\"keyword\": \"key\"}, child3, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('dummy/tests/app.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - .', function() {\n    mocha.it('app.js should pass ESLint', function() {\n      chai.assert.ok(true, 'app.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/app.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - app.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'app.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/components/test-component.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - components', function() {\n    mocha.it('components/test-component.js should pass ESLint', function() {\n      chai.assert.ok(false, 'components/test-component.js should pass ESLint.\\n20:8  - Unexpected console statement. (no-console)\\n25:8  - Unexpected console statement. (no-console)\\n30:8  - Unexpected console statement. (no-console)\\n35:8  - Unexpected console statement. (no-console)\\n40:8  - Unexpected console statement. (no-console)');\n    });\n  });\n\n});","define('dummy/tests/components/test-component.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - components/test-component.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'components/test-component.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/helpers/resolver.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - helpers', function() {\n    mocha.it('helpers/resolver.js should pass ESLint', function() {\n      chai.assert.ok(true, 'helpers/resolver.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('dummy/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - helpers/resolver.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'helpers/resolver.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/helpers/start-app.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - helpers', function() {\n    mocha.it('helpers/start-app.js should pass ESLint', function() {\n      chai.assert.ok(true, 'helpers/start-app.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, Ember, Application, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('dummy/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - helpers/start-app.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'helpers/start-app.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/router.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - .', function() {\n    mocha.it('router.js should pass ESLint', function() {\n      chai.assert.ok(true, 'router.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/router.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - router.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'router.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/test-helper.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - .', function() {\n    mocha.it('test-helper.js should pass ESLint', function() {\n      chai.assert.ok(true, 'test-helper.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-mocha'], function (resolver, ember_mocha) {\n\n\t'use strict';\n\n\tember_mocha.setResolver(resolver['default']);\n\n});","define('dummy/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - test-helper.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'test-helper.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/unit/helpers/function-resolver-test.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - unit/helpers', function() {\n    mocha.it('unit/helpers/function-resolver-test.js should pass ESLint', function() {\n      chai.assert.ok(true, 'unit/helpers/function-resolver-test.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/unit/helpers/function-resolver-test', ['ember', 'mocha', 'chai', 'ember-cli-keyboard-actions/function-resolver'], function (Ember, mocha, assert, FunctionResolver) {\n\n  'use strict';\n\n  /*eslint no-new:0*/\n  var testActions = {\n    keyDownActions: {\n      key37: function key37() {\n        return \"key37\";\n      },\n      backspace: function backspace() {\n        return \"backspace\";\n      },\n      alphanumeric: function alphanumeric() {\n        return \"alphanumeric\";\n      },\n      any: function any() {\n        return \"any\";\n      }\n    },\n    keyUpActions: {\n      key37: function key37() {\n        return \"key37\";\n      },\n      backspace: function backspace() {\n        return \"backspace\";\n      }\n    },\n    keyPressActions: {\n      key37: function key37() {\n        return \"key37\";\n      },\n      backspace: function backspace() {\n        return \"backspace\";\n      }\n    }\n  };\n\n  mocha.describe(\"FunctionResolver\", function () {\n    mocha.it(\"should be able to resolve a key action based on keyX\", function () {\n      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);\n      var keyUp = new FunctionResolver['default'](testActions.keyUpActions);\n      var keyPress = new FunctionResolver['default'](testActions.keyPressActions);\n\n      Ember['default'].run.next(function () {\n        assert['default'].equal(keyDown.resolveKeyCode(37)(), \"key37\");\n        assert['default'].equal(keyUp.resolveKeyCode(37)(), \"key37\");\n        assert['default'].equal(keyPress.resolveKeyCode(37)(), \"key37\");\n      });\n    });\n\n    mocha.it(\"should be able to resolve a key action to a key name\", function () {\n      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);\n      var keyUp = new FunctionResolver['default'](testActions.keyUpActions);\n      var keyPress = new FunctionResolver['default'](testActions.keyPressActions);\n\n      Ember['default'].run.next(function () {\n        assert['default'].equal(keyDown.resolvePrettyName(8)(), \"backspace\");\n        assert['default'].equal(keyUp.resolvePrettyName(8)(), \"backspace\");\n        assert['default'].equal(keyPress.resolvePrettyName(8)(), \"backspace\");\n      });\n    });\n\n    mocha.it(\"should be able to resolve a key action from a key range\", function () {\n      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);\n\n      Ember['default'].run.next(function () {\n        assert['default'].equal(keyDown.resolveKeyRange(85)(), \"alphanumeric\");\n      });\n    });\n\n    mocha.it(\"should be able to resolve a catch all\", function () {\n      var keyDown = new FunctionResolver['default'](testActions.keyDownActions);\n\n      Ember['default'].run.next(function () {\n        assert['default'].equal(keyDown.resolveCatchAll()(), \"any\");\n      });\n    });\n  });\n\n});","define('dummy/tests/unit/helpers/function-resolver-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/helpers/function-resolver-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/helpers/function-resolver-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","define('dummy/tests/unit/mixins/keyboard-actions-test.eslint-test', ['mocha', 'chai'], function (mocha, chai) {\n\n  'use strict';\n\n  mocha.describe('ESLint - unit/mixins', function() {\n    mocha.it('unit/mixins/keyboard-actions-test.js should pass ESLint', function() {\n      chai.assert.ok(true, 'unit/mixins/keyboard-actions-test.js should pass ESLint.\\n');\n    });\n  });\n\n});","define('dummy/tests/unit/mixins/keyboard-actions-test', ['chai', 'mocha', 'ember', 'ember-cli-keyboard-actions/mixins/keyboard-actions'], function (chai, mocha, Ember, KeyboardActionsMixin) {\n\n  'use strict';\n\n  /* jshint expr:true */\n  mocha.describe(\"KeyboardActionsMixin\", function () {\n    mocha.it(\"should exist\", function () {\n      chai.assert.ok(KeyboardActionsMixin['default']);\n    });\n\n    mocha.it(\"should attach in to the object's event manager\", function () {\n      var Test = Ember['default'].View.extend(KeyboardActionsMixin['default'], {});\n      var sample = Test.create({});\n\n      chai.assert.ok(sample.eventManager.keyUp);\n      chai.assert.ok(sample.eventManager.keyPress);\n      chai.assert.ok(sample.eventManager.keyDown);\n      chai.assert.isFunction(sample.eventManager.keyUp);\n      chai.assert.isFunction(sample.eventManager.keyPress);\n      chai.assert.isFunction(sample.eventManager.keyDown);\n    });\n  });\n\n});","define('dummy/tests/unit/mixins/keyboard-actions-test.jshint', function () {\n\n  'use strict';\n\n  describe('JSHint - unit/mixins/keyboard-actions-test.js', function(){\n  it('should pass jshint', function() { \n    expect(true, 'unit/mixins/keyboard-actions-test.js should pass jshint.').to.be.ok; \n  })});\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('dummy/config/environment', ['ember'], function(Ember) {\n  var prefix = 'dummy';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"dummy/tests/test-helper\");\n} else {\n  require(\"dummy/app\")[\"default\"].create({\"name\":\"ember-cli-keyboard-actions\",\"version\":\"v0.3.1\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrrrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"dummy.js"}